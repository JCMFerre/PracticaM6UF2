package vista;

import controlador.AsseguradoraControlador;
import controlador.ClientControlador;
import controlador.EMController;
import controlador.PolissaControlador;
import controlador.VehicleControlador;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Adreca;
import model.Asseguradora;
import model.Client;
import model.Polissa;
import model.Vehicle;

public class AplicacionGeneralGUI extends javax.swing.JFrame {

    private final Object[] COLUMNAS_TABLA_CLIENTES;
    private final Object[] COLUMNAS_TABLA_VEHICULOS;
    private final Object[] COLUMNAS_TABLA_ASSEGURADORAS;
    private final Object[] COLUMNAS_TABLA_POLISSA;

    private final ClientControlador clientControlador;
    private final VehicleControlador vehicleControlador;
    private final AsseguradoraControlador asseguradoraControlador;
    private final PolissaControlador polissaControlador;

    private Client clientBuscado;
    private Vehicle vehicleBuscado;
    private Asseguradora asseguradoraBuscada;
    private Polissa polissaBuscada;

    public AplicacionGeneralGUI(boolean externa) {
        this.COLUMNAS_TABLA_CLIENTES = new Object[]{"ID", "NIF", "Nom", "Carrer", "Població", "Número"};
        this.COLUMNAS_TABLA_VEHICULOS = new Object[]{"ID", "Matrícula", "Marca | Model", "Any fabricació", "Propietari"};
        this.COLUMNAS_TABLA_ASSEGURADORAS = new Object[]{"ID", "Nom", "NIF o CIF"};
        this.COLUMNAS_TABLA_POLISSA = new Object[]{"ID", "Número", "Prenedor", "Vehicle", "Data inici", "Data fi", "Import",
            "Tipus", "Asseguradora"};
        initComponents();
        setLocationRelativeTo(null);
        EntityManager entityManager = EMController.obtenerEntityManager(externa);
        clientControlador = new ClientControlador(entityManager);
        vehicleControlador = new VehicleControlador(entityManager);
        asseguradoraControlador = new AsseguradoraControlador(entityManager);
        polissaControlador = new PolissaControlador(entityManager);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupTipus = new javax.swing.ButtonGroup();
        buttonGroupCercaPolisses = new javax.swing.ButtonGroup();
        panelPestanas = new javax.swing.JTabbedPane();
        clientsPanel = new javax.swing.JPanel();
        nifLabel = new javax.swing.JLabel();
        nifTextField = new javax.swing.JTextField();
        nomLabel = new javax.swing.JLabel();
        nomTextField = new javax.swing.JTextField();
        direccioLabel = new javax.swing.JLabel();
        carrerTextField = new javax.swing.JTextField();
        carrerLabel = new javax.swing.JLabel();
        labelPoblacio = new javax.swing.JLabel();
        poblacioTextField = new javax.swing.JTextField();
        numeroTextField = new javax.swing.JTextField();
        numeroLabel = new javax.swing.JLabel();
        accionsLabel = new javax.swing.JLabel();
        registrarClientButton = new javax.swing.JButton();
        netejarCampsClientButton = new javax.swing.JButton();
        buscarClientLabel = new javax.swing.JLabel();
        consultaClientTextField = new javax.swing.JTextField();
        buscarClientButton = new javax.swing.JButton();
        totsClientsLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();
        consultaClientsButton = new javax.swing.JButton();
        vehiclesPanel = new javax.swing.JPanel();
        matriculaLabel = new javax.swing.JLabel();
        matriculaVehicleTextField = new javax.swing.JTextField();
        marcaModelLabel = new javax.swing.JLabel();
        marcaModelTextField = new javax.swing.JTextField();
        anyLabel = new javax.swing.JLabel();
        anyFabricacioTextField = new javax.swing.JTextField();
        propietariLabel = new javax.swing.JLabel();
        comboBoxClients = new javax.swing.JComboBox<>();
        accionsLabel1 = new javax.swing.JLabel();
        registrarVehicleButton = new javax.swing.JButton();
        netejarCampsVehicle = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        consultaVehicleTextField = new javax.swing.JTextField();
        buscarVehicleButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        vehiclesTable = new javax.swing.JTable();
        vehiclesTodosLabel = new javax.swing.JLabel();
        consultaVehiclesButton = new javax.swing.JButton();
        asseguradoraPanel = new javax.swing.JPanel();
        nomAsseguradoraLabel = new javax.swing.JLabel();
        nomAsseguradoraTextField = new javax.swing.JTextField();
        cifAsseguradoraLabel = new javax.swing.JLabel();
        cifAsseguradoraTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        registrarAsseguradoraButton = new javax.swing.JButton();
        netejarCampsAsseguradoraButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        consultaAsseguradoraPerNom = new javax.swing.JTextField();
        buscarAsseguradoraButton = new javax.swing.JButton();
        labelInfoTable = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        asseguradoraTable = new javax.swing.JTable();
        consultatAsseguradoresTotesButton = new javax.swing.JButton();
        polissesPanel = new javax.swing.JPanel();
        numeroPolissaLabel = new javax.swing.JLabel();
        numeroPolissaTextField = new javax.swing.JTextField();
        comboBoxClientsPolissa = new javax.swing.JComboBox<>();
        comboBoxVehiclePolissa = new javax.swing.JComboBox<>();
        clientPolissaLabel = new javax.swing.JLabel();
        vehiclePolissaLabel = new javax.swing.JLabel();
        dataIniciPolissaLabel = new javax.swing.JLabel();
        dataIniciPolissaTextField = new javax.swing.JTextField();
        dataFiLabelPolissa = new javax.swing.JLabel();
        dataFiPolissaTextField = new javax.swing.JTextField();
        asseguradoraPolisaLabel = new javax.swing.JLabel();
        comboBoxAsseguradoresPolissa = new javax.swing.JComboBox<>();
        tipusPolissaLabel = new javax.swing.JLabel();
        radioATercers = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        importPolissaLabel = new javax.swing.JLabel();
        importPolissaTextField = new javax.swing.JTextField();
        accionsPolissaLabel = new javax.swing.JLabel();
        registrarPolissaButton = new javax.swing.JButton();
        netejarCampsPolissaButton = new javax.swing.JButton();
        rbIDClientPolissa = new javax.swing.JRadioButton();
        tipusCercaPolissaLabel = new javax.swing.JLabel();
        rbIDVehiclePolissa = new javax.swing.JRadioButton();
        rbTotesPolissa = new javax.swing.JRadioButton();
        campCercaLabel = new javax.swing.JLabel();
        cercarPolissaTextField = new javax.swing.JTextField();
        cercaPerTipusPolissaButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        polissaTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestió");
        setResizable(false);

        nifLabel.setText("NIF");

        nomLabel.setText("Nom");

        direccioLabel.setText("Direcció");

        carrerLabel.setText("Carrer");

        labelPoblacio.setText("Població");

        numeroLabel.setText("Número");

        accionsLabel.setText("Accions");

        registrarClientButton.setText("Registrar client");
        registrarClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarClient(evt);
            }
        });

        netejarCampsClientButton.setText("Netejar camps");
        netejarCampsClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarCamposClients(evt);
            }
        });

        buscarClientLabel.setText("Buscar client per nom");

        buscarClientButton.setText("Cercar");
        buscarClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarClientPorNombre(evt);
            }
        });

        totsClientsLabel.setText("Taula amb tots els clients (*)");

        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NIF", "Nom", "Carrer", "Població", "Número"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(clientsTable);

        consultaClientsButton.setText("* Consultar tots els clients");
        consultaClientsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarClientesEnTabla(evt);
            }
        });

        javax.swing.GroupLayout clientsPanelLayout = new javax.swing.GroupLayout(clientsPanel);
        clientsPanel.setLayout(clientsPanelLayout);
        clientsPanelLayout.setHorizontalGroup(
            clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(clientsPanelLayout.createSequentialGroup()
                        .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(clientsPanelLayout.createSequentialGroup()
                                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nifLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nomLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 205, Short.MAX_VALUE))
                            .addComponent(registrarClientButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nomTextField)
                            .addComponent(nifTextField))
                        .addGap(18, 18, 18)
                        .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientsPanelLayout.createSequentialGroup()
                                .addComponent(poblacioTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(numeroTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientsPanelLayout.createSequentialGroup()
                                .addComponent(labelPoblacio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numeroLabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientsPanelLayout.createSequentialGroup()
                                .addComponent(carrerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(direccioLabel))
                            .addComponent(carrerTextField)
                            .addComponent(netejarCampsClientButton, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)))
                    .addGroup(clientsPanelLayout.createSequentialGroup()
                        .addComponent(consultaClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buscarClientButton, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                    .addGroup(clientsPanelLayout.createSequentialGroup()
                        .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accionsLabel)
                            .addComponent(buscarClientLabel)
                            .addComponent(totsClientsLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(consultaClientsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        clientsPanelLayout.setVerticalGroup(
            clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nifLabel)
                    .addComponent(direccioLabel)
                    .addComponent(carrerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nifTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(carrerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomLabel)
                    .addComponent(labelPoblacio)
                    .addComponent(numeroLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(poblacioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numeroTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(accionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrarClientButton)
                    .addComponent(netejarCampsClientButton))
                .addGap(18, 18, 18)
                .addComponent(buscarClientLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultaClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarClientButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totsClientsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(consultaClientsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPestanas.addTab("Clients", clientsPanel);

        matriculaLabel.setText("Matrícula");

        marcaModelLabel.setText("Marca | Model");

        anyLabel.setText("Any fabricació");

        propietariLabel.setText("Propietari (Client)");

        comboBoxClients.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona un client" }));
        comboBoxClients.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                actualizarComboBox(evt);
            }
        });

        accionsLabel1.setText("Accions");

        registrarVehicleButton.setText("Registrar vehicle");
        registrarVehicleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarVehicle(evt);
            }
        });

        netejarCampsVehicle.setText("Netejar camps");
        netejarCampsVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netejarCampsVehicle(evt);
            }
        });

        jLabel1.setText("Buscar vehicle per matrícula");

        buscarVehicleButton.setText("Cercar");
        buscarVehicleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarVehiclePerMatricula(evt);
            }
        });

        vehiclesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Matrícula", "Marca | Model", "Any fabricació", "Propietari"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vehiclesTable);

        vehiclesTodosLabel.setText("Taula amb tots els vehicles (*)");

        consultaVehiclesButton.setText("* Consultar tots els vehicles");
        consultaVehiclesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarTodosLosVehiculo(evt);
            }
        });

        javax.swing.GroupLayout vehiclesPanelLayout = new javax.swing.GroupLayout(vehiclesPanel);
        vehiclesPanel.setLayout(vehiclesPanelLayout);
        vehiclesPanelLayout.setHorizontalGroup(
            vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehiclesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(vehiclesPanelLayout.createSequentialGroup()
                        .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, vehiclesPanelLayout.createSequentialGroup()
                                .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(matriculaLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(anyLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(accionsLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(matriculaVehicleTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registrarVehicleButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(anyFabricacioTextField, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(marcaModelTextField)
                            .addComponent(netejarCampsVehicle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxClients, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, vehiclesPanelLayout.createSequentialGroup()
                                .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(marcaModelLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(propietariLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(vehiclesPanelLayout.createSequentialGroup()
                        .addComponent(consultaVehicleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buscarVehicleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                    .addGroup(vehiclesPanelLayout.createSequentialGroup()
                        .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(vehiclesTodosLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(consultaVehiclesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        vehiclesPanelLayout.setVerticalGroup(
            vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehiclesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matriculaLabel)
                    .addComponent(marcaModelLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matriculaVehicleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(marcaModelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anyLabel)
                    .addComponent(propietariLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anyFabricacioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxClients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(accionsLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrarVehicleButton)
                    .addComponent(netejarCampsVehicle))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultaVehicleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarVehicleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(vehiclesTodosLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(consultaVehiclesButton)
                .addContainerGap())
        );

        panelPestanas.addTab("Vehicle", vehiclesPanel);

        nomAsseguradoraLabel.setText("Nom");

        cifAsseguradoraLabel.setText("NIF o CIF");

        jLabel2.setText("Accions");

        registrarAsseguradoraButton.setText("Registrar asseguradora");
        registrarAsseguradoraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarAsseguradoraEvent(evt);
            }
        });

        netejarCampsAsseguradoraButton.setText("Netejar camps");
        netejarCampsAsseguradoraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netejarCampsAsseguradoraButton(evt);
            }
        });

        jLabel3.setText("Buscar asseguradora per nom");

        buscarAsseguradoraButton.setText("Buscar");
        buscarAsseguradoraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarAsseguraPorNombre(evt);
            }
        });

        labelInfoTable.setText("Taula amb totes les asseguradores (*)");

        asseguradoraTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nom", "NIF o CIF"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(asseguradoraTable);

        consultatAsseguradoresTotesButton.setText("* Consultar totes les asseguradores");
        consultatAsseguradoresTotesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarTotesLesAsseguradoresEvent(evt);
            }
        });

        javax.swing.GroupLayout asseguradoraPanelLayout = new javax.swing.GroupLayout(asseguradoraPanel);
        asseguradoraPanel.setLayout(asseguradoraPanelLayout);
        asseguradoraPanelLayout.setHorizontalGroup(
            asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(asseguradoraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addGroup(asseguradoraPanelLayout.createSequentialGroup()
                        .addGroup(asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(registrarAsseguradoraButton, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(nomAsseguradoraTextField)
                            .addComponent(nomAsseguradoraLabel, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cifAsseguradoraTextField)
                            .addGroup(asseguradoraPanelLayout.createSequentialGroup()
                                .addComponent(cifAsseguradoraLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(netejarCampsAsseguradoraButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(asseguradoraPanelLayout.createSequentialGroup()
                        .addComponent(consultaAsseguradoraPerNom, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buscarAsseguradoraButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(asseguradoraPanelLayout.createSequentialGroup()
                        .addGroup(asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(labelInfoTable))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(consultatAsseguradoresTotesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        asseguradoraPanelLayout.setVerticalGroup(
            asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(asseguradoraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomAsseguradoraLabel)
                    .addComponent(cifAsseguradoraLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomAsseguradoraTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cifAsseguradoraTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrarAsseguradoraButton)
                    .addComponent(netejarCampsAsseguradoraButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(asseguradoraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultaAsseguradoraPerNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarAsseguradoraButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelInfoTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(consultatAsseguradoresTotesButton)
                .addContainerGap())
        );

        panelPestanas.addTab("Asseguradora", asseguradoraPanel);

        numeroPolissaLabel.setText("Número");

        comboBoxClientsPolissa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona un client" }));
        comboBoxClientsPolissa.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                cargarComboClientesPolissaEvent(evt);
            }
        });

        comboBoxVehiclePolissa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona un vehicle" }));
        comboBoxVehiclePolissa.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                cargarComboVehiclesPolissaEvent(evt);
            }
        });

        clientPolissaLabel.setText("Client (Prenedor)");

        vehiclePolissaLabel.setText("Vehicle");

        dataIniciPolissaLabel.setText("Data inici (dd/mm/yyyy)");

        dataFiLabelPolissa.setText("Data fi (dd/mm/yyyy)");

        asseguradoraPolisaLabel.setText("Asseguradora");

        comboBoxAsseguradoresPolissa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona una aseguradora" }));
        comboBoxAsseguradoresPolissa.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                cargarComboAsseguradorasPolissaEvent(evt);
            }
        });

        tipusPolissaLabel.setText("Tipus");

        buttonGroupTipus.add(radioATercers);
        radioATercers.setSelected(true);
        radioATercers.setText("Tercers");

        buttonGroupTipus.add(jRadioButton1);
        jRadioButton1.setText("Tot risc");

        importPolissaLabel.setText("Import de l'assegurança");

        accionsPolissaLabel.setText("Accions");

        registrarPolissaButton.setText("Registrar polissa");
        registrarPolissaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarPolissaEvent(evt);
            }
        });

        netejarCampsPolissaButton.setText("Netejar camps");
        netejarCampsPolissaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netejasCampsPolissaEvent(evt);
            }
        });

        buttonGroupCercaPolisses.add(rbIDClientPolissa);
        rbIDClientPolissa.setText("ID Client");

        tipusCercaPolissaLabel.setText("Tipus de cerca (Per ...)");

        buttonGroupCercaPolisses.add(rbIDVehiclePolissa);
        rbIDVehiclePolissa.setText("ID Vehicle");

        buttonGroupCercaPolisses.add(rbTotesPolissa);
        rbTotesPolissa.setSelected(true);
        rbTotesPolissa.setText("Totes");

        campCercaLabel.setText("Camp de cerca");

        cercaPerTipusPolissaButton.setText("Cerca");
        cercaPerTipusPolissaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cercarPerTipusPolissaEvent(evt);
            }
        });

        polissaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Número", "Prenedor", "Vehicle", "Data inici", "Data fi", "Import", "Tipus", "Asseguradora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(polissaTable);

        javax.swing.GroupLayout polissesPanelLayout = new javax.swing.GroupLayout(polissesPanel);
        polissesPanel.setLayout(polissesPanelLayout);
        polissesPanelLayout.setHorizontalGroup(
            polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, polissesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, polissesPanelLayout.createSequentialGroup()
                        .addComponent(registrarPolissaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(netejarCampsPolissaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, polissesPanelLayout.createSequentialGroup()
                        .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tipusPolissaLabel)
                            .addGroup(polissesPanelLayout.createSequentialGroup()
                                .addComponent(radioATercers)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton1)))
                        .addGap(18, 18, 18)
                        .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxAsseguradoresPolissa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(polissesPanelLayout.createSequentialGroup()
                                .addComponent(asseguradoraPolisaLabel)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, polissesPanelLayout.createSequentialGroup()
                        .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tipusCercaPolissaLabel)
                            .addGroup(polissesPanelLayout.createSequentialGroup()
                                .addComponent(rbIDClientPolissa)
                                .addGap(18, 18, 18)
                                .addComponent(rbIDVehiclePolissa)
                                .addGap(18, 18, 18)
                                .addComponent(rbTotesPolissa)))
                        .addGap(32, 32, 32)
                        .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campCercaLabel)
                            .addGroup(polissesPanelLayout.createSequentialGroup()
                                .addComponent(cercarPolissaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cercaPerTipusPolissaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, polissesPanelLayout.createSequentialGroup()
                        .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(polissesPanelLayout.createSequentialGroup()
                                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(dataIniciPolissaTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                        .addComponent(numeroPolissaTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(numeroPolissaLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(dataIniciPolissaLabel))
                                .addGap(18, 18, 18)
                                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(clientPolissaLabel)
                                    .addComponent(dataFiLabelPolissa)
                                    .addComponent(comboBoxClientsPolissa, 0, 148, Short.MAX_VALUE)
                                    .addComponent(dataFiPolissaTextField))
                                .addGap(18, 18, 18)
                                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxVehiclePolissa, 0, 169, Short.MAX_VALUE)
                                    .addComponent(vehiclePolissaLabel)
                                    .addComponent(importPolissaLabel)
                                    .addComponent(importPolissaTextField)))
                            .addComponent(accionsPolissaLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        polissesPanelLayout.setVerticalGroup(
            polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(polissesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numeroPolissaLabel)
                    .addComponent(clientPolissaLabel)
                    .addComponent(vehiclePolissaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numeroPolissaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxClientsPolissa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxVehiclePolissa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataIniciPolissaLabel)
                    .addComponent(dataFiLabelPolissa)
                    .addComponent(importPolissaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataIniciPolissaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataFiPolissaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importPolissaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipusPolissaLabel)
                    .addComponent(asseguradoraPolisaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(radioATercers)
                        .addComponent(jRadioButton1))
                    .addComponent(comboBoxAsseguradoresPolissa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(accionsPolissaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrarPolissaButton)
                    .addComponent(netejarCampsPolissaButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipusCercaPolissaLabel)
                    .addComponent(campCercaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(polissesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbIDClientPolissa)
                    .addComponent(rbIDVehiclePolissa)
                    .addComponent(rbTotesPolissa)
                    .addComponent(cercarPolissaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cercaPerTipusPolissaButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelPestanas.addTab("Pòlisses", polissesPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelPestanas, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelPestanas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lanzarMensaje(boolean error, String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, error ? "Error" : "Informació",
                error ? JOptionPane.ERROR_MESSAGE : JOptionPane.INFORMATION_MESSAGE);
    }

    // Aquí empieza GUI Clientes.
    private void registrarClient(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarClient
        if (clientBuscado == null) {
            if (comprobarCamposClients()) {
                boolean insertado = clientControlador.insertar(obtenerClientDeGUI());
                lanzarMensaje(!insertado, insertado ? "Client inserit correctament."
                        : "No s'ha inserit correctament el client, pot ser pel NIF (Repetit).");
                if (insertado) {
                    limpiarCamposClients(null);
                }
            } else {
                lanzarMensaje(true, "Comprova que cap camp està vuit.");
            }
        } else {
            boolean borrado = clientControlador.eliminar(clientBuscado);
            lanzarMensaje(!borrado, borrado ? "Client eliminat correctament." : "No s'ha pogut eliminar el client (pot ser per les relacions entre taules).");
            limpiarCamposClients(null);
        }
    }//GEN-LAST:event_registrarClient

    private void limpiarCamposClients(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarCamposClients
        nifTextField.setText("");
        nomTextField.setText("");
        poblacioTextField.setText("");
        carrerTextField.setText("");
        numeroTextField.setText("");
        consultaClientTextField.setText("");
        registrarClientButton.setText("Registrar client");
        clientBuscado = null;
        ponerFocoClientes(false);
    }//GEN-LAST:event_limpiarCamposClients

    private void ponerFocoClientes(boolean ponerFocoEnBusqueda) {
        (ponerFocoEnBusqueda ? consultaClientTextField : nifTextField).requestFocus();
    }

    private Client obtenerClientDeGUI() {
        Client clientObtingutGUI = new Client();
        clientObtingutGUI.setNif(nifTextField.getText());
        clientObtingutGUI.setNom(nomTextField.getText());
        clientObtingutGUI.setAdreca(obtenerAdrecaDeGUI());
        return clientObtingutGUI;
    }

    private Adreca obtenerAdrecaDeGUI() {
        return new Adreca(carrerTextField.getText(),
                Integer.parseInt(numeroTextField.getText()),
                poblacioTextField.getText());
    }

    private void buscarClientPorNombre(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarClientPorNombre
        String nombreConsulta = consultaClientTextField.getText();
        if (nombreConsulta == null || nombreConsulta.isEmpty()) {
            lanzarMensaje(true, "Comprova que el camp de cerca no està vuit.");
        } else {
            clientBuscado = clientControlador.obtindreClientPerNom(nombreConsulta);
            if (clientBuscado == null) {
                lanzarMensaje(false, "No s'ha trobat cap client amb aquest nom.");
                limpiarCamposClients(null);
                ponerFocoClientes(true);
            } else {
                ponerCamposClienteGUI(clientBuscado);
            }
        }
    }//GEN-LAST:event_buscarClientPorNombre

    private void ponerCamposClienteGUI(Client cliente) {
        nifTextField.setText(cliente.getNif());
        nomTextField.setText(cliente.getNom());
        Adreca adreca = cliente.getAdreca();
        carrerTextField.setText(adreca.getCarrer());
        numeroTextField.setText(Integer.toString(adreca.getNumero()));
        poblacioTextField.setText(adreca.getPoblacio());
        registrarClientButton.setText("Eliminar client");
    }

    private boolean comprobarCamposClients() {
        return true;
    }
    // Aquí termina GUI Clientes.
    // Aquí empieza GUI Vehicles.

    private void actualizarComboBox(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_actualizarComboBox
        cargarComboClientes(clientControlador.obtenerTodosLosClientes(), false);
    }//GEN-LAST:event_actualizarComboBox

    private void registrarVehicle(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarVehicle
        if (vehicleBuscado == null) {
            if (comprobarCamposVehiculo()) {
                boolean insertado = vehicleControlador.insertar(obtenerVehicleGUI());
                lanzarMensaje(!insertado, insertado ? "Vehicle inserit correctament."
                        : "No s'ha inserit correctament el vehicle, potser per la matrícula (Repetida).");
                if (insertado) {
                    netejarCampsVehicle(null);
                }
            } else {
                lanzarMensaje(true, "Comprova que cap camp està vuit i amb el seu format (números, etc.).");
            }
        } else {
            boolean borrado = vehicleControlador.eliminar(vehicleBuscado);
            lanzarMensaje(!borrado, borrado ? "Vehicle eliminat correctament." : "No s'ha pogut eliminar el vehicle (pot ser per les relacions entre taules).");
            netejarCampsVehicle(null);
        }
    }//GEN-LAST:event_registrarVehicle

    private Vehicle obtenerVehicleGUI() {
        Vehicle vehicle = new Vehicle();
        vehicle.setMatricula(matriculaVehicleTextField.getText().toUpperCase());
        vehicle.setMarcaModel(marcaModelTextField.getText());
        vehicle.setAnyFabricacio(Integer.parseInt(anyFabricacioTextField.getText()));
        vehicle.setPropietari(obtenerClienteParseandoComboBox());
        return vehicle;
    }

    private Client obtenerClienteParseandoComboBox() {
        long idClient = Long.parseLong(comboBoxClients.getSelectedItem().toString().split("\\s-\\s")[0]);
        return vehicleControlador.obtenerClientePorId(idClient);
    }

    private void netejarCampsVehicle(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netejarCampsVehicle
        matriculaVehicleTextField.setText("");
        anyFabricacioTextField.setText("");
        marcaModelTextField.setText("");
        comboBoxClients.setSelectedIndex(0);
        consultaVehicleTextField.setText("");
        registrarVehicleButton.setText("Registrar vehicle");
        vehicleBuscado = null;
        ponerFocoVehiculos(false);
    }//GEN-LAST:event_netejarCampsVehicle

    private void ponerFocoVehiculos(boolean ponerFocoEnBusqueda) {
        (ponerFocoEnBusqueda ? consultaVehicleTextField : matriculaVehicleTextField).requestFocus();
    }

    private void buscarVehiclePerMatricula(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarVehiclePerMatricula
        String matricula = consultaVehicleTextField.getText();
        if (matricula == null || matricula.isEmpty()) {
            lanzarMensaje(true, "Comprova que el camp de cerca no està vuit.");
        } else {
            vehicleBuscado = vehicleControlador.obtenerVehiculoPorMatricula(matricula.toUpperCase());
            if (vehicleBuscado == null) {
                lanzarMensaje(false, "No s'ha trobat cap vehicle amb aquesta matrícula.");
                netejarCampsVehicle(null);
                ponerFocoVehiculos(true);
            } else {
                ponerCamposVehiculo(vehicleBuscado);
            }
        }
    }//GEN-LAST:event_buscarVehiclePerMatricula

    private void cargarClientesEnTabla(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarClientesEnTabla
        cargarTodosLosClientesTabla(clientControlador.obtenerTodosLosClientes());
    }//GEN-LAST:event_cargarClientesEnTabla

    private void consultarTodosLosVehiculo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarTodosLosVehiculo
        cargarTodosLosVehiculosTabla(vehicleControlador.obtenerTodosLosVehiculos());
    }//GEN-LAST:event_consultarTodosLosVehiculo

    private void registrarAsseguradoraEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarAsseguradoraEvent
        if (asseguradoraBuscada == null) {
            if (comprovarCampsAsseguradora()) {
                boolean insertado = asseguradoraControlador.insertar(obtenerAsseguradoraGUI());
                lanzarMensaje(!insertado, insertado ? "Asseguradora inserida correctament."
                        : "No s'ha inserit correctament l'asseguradora, potser pel nom (Repetit).");
                if (insertado) {
                    netejarCampsAsseguradoraButton(null);
                }
            } else {
                lanzarMensaje(true, "Comprova que cap camp està vuit i amb el seu format (números, etc.).");
            }
        } else {
            boolean borrado = asseguradoraControlador.eliminar(asseguradoraBuscada);
            lanzarMensaje(!borrado, borrado ? "Asseguradora eliminada correctament." : "No s'ha pogut eliminar l'asseguradora (pot ser per les relacions entre taules).");
            netejarCampsAsseguradoraButton(null);
        }
    }//GEN-LAST:event_registrarAsseguradoraEvent

    private void netejarCampsAsseguradoraButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netejarCampsAsseguradoraButton
        nomAsseguradoraTextField.setText("");
        cifAsseguradoraTextField.setText("");
        consultaAsseguradoraPerNom.setText("");
        asseguradoraBuscada = null;
        registrarAsseguradoraButton.setText("Registrar asseguradora");
        ponerFocoAsseguradora(false);
    }//GEN-LAST:event_netejarCampsAsseguradoraButton

    private void buscarAsseguraPorNombre(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarAsseguraPorNombre
        String nomAsseguradora = consultaAsseguradoraPerNom.getText();
        if (nomAsseguradora == null || nomAsseguradora.isEmpty()) {
            lanzarMensaje(true, "Comprova que el camp de cerca no està vuit.");
        } else {
            asseguradoraBuscada = asseguradoraControlador.obtenerAsseguradoraPorNombre(nomAsseguradora);
            if (asseguradoraBuscada == null) {
                lanzarMensaje(false, "No s'ha trobat cap asseguradora amb aquest nom.");
                netejarCampsAsseguradoraButton(null);
                ponerFocoAsseguradora(true);
            } else {
                ponerCamposAsseguradora(asseguradoraBuscada);
            }
        }
    }//GEN-LAST:event_buscarAsseguraPorNombre

    private void consultarTotesLesAsseguradoresEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarTotesLesAsseguradoresEvent
        cargarTodosLasAsseguradorasTabla(asseguradoraControlador.obtenerTodasLasAsseguradoras());
    }//GEN-LAST:event_consultarTotesLesAsseguradoresEvent

    private void cargarComboClientesPolissaEvent(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cargarComboClientesPolissaEvent
        cargarListaComboClientesPolissa(clientControlador.obtenerTodosLosClientes(), false);
    }//GEN-LAST:event_cargarComboClientesPolissaEvent

    private void cargarComboVehiclesPolissaEvent(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cargarComboVehiclesPolissaEvent
        cargarListaComboVehiclesPolissa(vehicleControlador.obtenerTodosLosVehiculos(), false);
    }//GEN-LAST:event_cargarComboVehiclesPolissaEvent

    private void cargarComboAsseguradorasPolissaEvent(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cargarComboAsseguradorasPolissaEvent
        cargarListaComboAsseguradorasPolissa(asseguradoraControlador.obtenerTodasLasAsseguradoras(), false);
    }//GEN-LAST:event_cargarComboAsseguradorasPolissaEvent

    private void netejasCampsPolissaEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netejasCampsPolissaEvent
        comboBoxAsseguradoresPolissa.setSelectedIndex(0);
        comboBoxClientsPolissa.setSelectedIndex(0);
        comboBoxVehiclePolissa.setSelectedIndex(0);
        rbTotesPolissa.setSelected(true);
        numeroPolissaTextField.setText("");
        dataIniciPolissaTextField.setText("");
        dataFiPolissaTextField.setText("");
        importPolissaTextField.setText("");
        cercarPolissaTextField.setText("");
        radioATercers.setSelected(true);
        ponerFocoPolissa(false);
    }//GEN-LAST:event_netejasCampsPolissaEvent

    private void cercarPerTipusPolissaEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cercarPerTipusPolissaEvent
        if (rbTotesPolissa.isSelected()) {
            cargarListaEnTablaPolizas(polissaControlador.obtenerTodasLasPolizas());
        } else {

        }
    }//GEN-LAST:event_cercarPerTipusPolissaEvent

    private void registrarPolissaEvent(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarPolissaEvent
        if (polissaBuscada == null) {
            if (comprovarCampsPolissa()) {
                boolean insertado = polissaControlador.insertar(obtenerPolissaGUI());
                lanzarMensaje(!insertado, insertado ? "Polissa inserida correctament."
                        : "No s'ha inserit correctament la Polissa, potser pel número (Repetit).");
                if (insertado) {
                    netejasCampsPolissaEvent(null);
                }
            } else {
                lanzarMensaje(true, "Comprova que cap camp està vuit i amb el seu format (números, etc.).");
            }
        } else {
            boolean borrado = polissaControlador.eliminar(polissaBuscada);
            lanzarMensaje(!borrado, borrado ? "Polissa eliminada correctament." : "No s'ha pogut eliminar la Polissa (pot ser per les relacions entre taules).");
            netejasCampsPolissaEvent(null);
        }
    }//GEN-LAST:event_registrarPolissaEvent

    private boolean comprovarCampsPolissa() {
        return true;
    }

    private Polissa obtenerPolissaGUI() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Polissa polissa = new Polissa();
        polissa.setNumero(numeroPolissaTextField.getText());
        try {
            polissa.setDataInici(sdf.parse(dataIniciPolissaTextField.getText()));
            polissa.setDataFi(sdf.parse(dataFiPolissaTextField.getText()));
        } catch (ParseException ex) {
            System.out.println("Error al parsear las fechas, esto ya esta validado en comprovarCampsPolissa");
        }
        polissa.setPrenedor(clientControlador.obtenerPorId(Client.class, obtenerIdClientComboPolissa()));
        polissa.setVehicle(vehicleControlador.obtenerPorId(Vehicle.class, obtenerIdVehicleComboPolissa()));
        polissa.setAsseguradora(asseguradoraControlador.obtenerPorId(Asseguradora.class, obtenerIdAsseguradoraComboPolissa()));
        polissa.setTipus(radioATercers.isSelected());
        polissa.setPrima(Double.parseDouble(importPolissaTextField.getText()));
        return polissa;
    }

    private long obtenerIdClientComboPolissa() {
        return Long.parseLong(comboBoxClientsPolissa.getSelectedItem().toString().split("\\s-\\s")[0]);
    }

    private long obtenerIdAsseguradoraComboPolissa() {
        return Long.parseLong(comboBoxAsseguradoresPolissa.getSelectedItem().toString().split("\\s-\\s")[0]);
    }

    private long obtenerIdVehicleComboPolissa() {
        return Long.parseLong(comboBoxVehiclePolissa.getSelectedItem().toString().split("\\s-\\s")[0]);
    }

    private void cargarListaEnTablaPolizas(List<Polissa> polizas) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        DefaultTableModel dtm = new DefaultTableModel(COLUMNAS_TABLA_POLISSA, 0);
        polissaTable.setModel(dtm);
        for (Polissa polissa : polizas) {
            dtm.addRow(new Object[]{polissa.getId(), polissa.getNumero(), polissa.getPrenedor().getNom() + " ("
                + polissa.getPrenedor().getId() + ")", polissa.getVehicle().getMatricula() + " ("
                + polissa.getVehicle().getId() + ")", sdf.format(polissa.getDataInici()),
                sdf.format(polissa.getDataFi()), polissa.getPrima(),
                polissa.isTipus() ? "TERCERS" : "TOT RISC", polissa.getAsseguradora().getNom() + " ("
                + polissa.getId() + ")"});
        }
        if (polizas.isEmpty()) {
            lanzarMensaje(false, "No hi ha cap polissa.");
        }

    }

    private void ponerFocoPolissa(boolean ponerFocoBusqueda) {
        (ponerFocoBusqueda ? cercarPolissaTextField : numeroPolissaTextField).requestFocus();
    }

    private void cargarListaComboClientesPolissa(List<Client> clientes, boolean llamadoDesdePonerCampos) {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        comboBoxClientsPolissa.setModel(comboBoxModel);
        comboBoxModel.addElement("Selecciona un client");
        for (Client client : clientes) {
            comboBoxModel.addElement(client.getId() + " - " + client.getNom() + " - " + client.getNif());
        }
        if (llamadoDesdePonerCampos) {
            comboBoxClientsPolissa.setSelectedIndex(1);
        }
    }

    private void cargarListaComboVehiclesPolissa(List<Vehicle> vehicles, boolean llamadoDesdePonerCampos) {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        comboBoxVehiclePolissa.setModel(comboBoxModel);
        comboBoxModel.addElement("Selecciona un vehicle");
        for (Vehicle vehicle : vehicles) {
            comboBoxModel.addElement(vehicle.getId() + " - " + vehicle.getMatricula() + " - " + vehicle.getMarcaModel());
        }
        if (llamadoDesdePonerCampos) {
            comboBoxVehiclePolissa.setSelectedIndex(1);
        }
    }

    private void cargarListaComboAsseguradorasPolissa(List<Asseguradora> asseguradoras, boolean llamadoDesdePonerCampos) {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        comboBoxAsseguradoresPolissa.setModel(comboBoxModel);
        comboBoxModel.addElement("Selecciona una asseguradora");
        for (Asseguradora asseguradora : asseguradoras) {
            comboBoxModel.addElement(asseguradora.getId() + " - " + asseguradora.getNom() + " - " + asseguradora.getCif());
        }
        if (llamadoDesdePonerCampos) {
            comboBoxAsseguradoresPolissa.setSelectedIndex(1);
        }
    }

    private boolean comprovarCampsAsseguradora() {
        return true;
    }

    private void cargarTodosLosVehiculosTabla(List<Vehicle> vehicles) {
        DefaultTableModel dtm = new DefaultTableModel(COLUMNAS_TABLA_VEHICULOS, 0);
        vehiclesTable.setModel(dtm);
        for (Vehicle vehicle : vehicles) {
            dtm.addRow(new Object[]{vehicle.getId(), vehicle.getMatricula(), vehicle.getMarcaModel(),
                vehicle.getAnyFabricacio(), vehicle.getPropietari().getNom()
                + " (" + vehicle.getPropietari().getId() + ")"});
        }
        if (vehicles.isEmpty()) {
            lanzarMensaje(false, "No hi ha cap vehicle.");
        }
    }

    private void cargarTodosLosClientesTabla(List<Client> clientes) {
        DefaultTableModel dtm = new DefaultTableModel(COLUMNAS_TABLA_CLIENTES, 0);
        clientsTable.setModel(dtm);
        for (Client cliente : clientes) {
            dtm.addRow(new Object[]{cliente.getId(), cliente.getNif(), cliente.getNom(),
                cliente.getAdreca().getCarrer(), cliente.getAdreca().getPoblacio(),
                cliente.getAdreca().getNumero()});
        }
        if (clientes.isEmpty()) {
            lanzarMensaje(false, "No hi ha cap client.");
        }
    }

    private boolean comprobarCamposVehiculo() {
        return true;
    }

    private void ponerCamposVehiculo(Vehicle vehicle) {
        matriculaVehicleTextField.setText(vehicle.getMatricula());
        marcaModelTextField.setText(vehicle.getMarcaModel());
        anyFabricacioTextField.setText(Integer.toString(vehicle.getAnyFabricacio()));
        cargarComboClientes(Arrays.asList(vehicle.getPropietari()), true);
        registrarVehicleButton.setText("Eliminar vehicle");
    }

    private void cargarComboClientes(List<Client> clientes, boolean llamadoDesdePonerCampos) {
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        comboBoxClients.setModel(comboBoxModel);
        comboBoxModel.addElement("Selecciona un client");
        for (Client cliente : clientes) {
            comboBoxModel.addElement(cliente.getId() + " - " + cliente.getNif() + " - " + cliente.getNom());
        }
        if (llamadoDesdePonerCampos) {
            comboBoxClients.setSelectedIndex(1);
        }
    }

    // Aquí termina GUI vehicles.
    // Aquí empieza GUI Asseguradora.
    private void ponerCamposAsseguradora(Asseguradora asseguradora) {
        nomAsseguradoraTextField.setText(asseguradora.getNom());
        cifAsseguradoraTextField.setText(asseguradora.getCif());
        registrarAsseguradoraButton.setText("Eliminar asseguradora");
    }

    private void cargarTodosLasAsseguradorasTabla(List<Asseguradora> listaAsseguradoras) {
        DefaultTableModel dtm = new DefaultTableModel(COLUMNAS_TABLA_ASSEGURADORAS, 0);
        asseguradoraTable.setModel(dtm);
        for (Asseguradora asseguradora : listaAsseguradoras) {
            dtm.addRow(new Object[]{asseguradora.getId(), asseguradora.getNom(), asseguradora.getCif()});
        }
        if (listaAsseguradoras.isEmpty()) {
            lanzarMensaje(false, "No hi ha cap asseguradora.");
        }
    }

    private Asseguradora obtenerAsseguradoraGUI() {
        Asseguradora asseguradora = new Asseguradora();
        asseguradora.setNom(nomAsseguradoraTextField.getText());
        asseguradora.setCif(cifAsseguradoraTextField.getText());
        return asseguradora;
    }

    private void ponerFocoAsseguradora(boolean ponerFocoEnBusqueda) {
        (ponerFocoEnBusqueda ? consultaAsseguradoraPerNom : nomAsseguradoraTextField).requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accionsLabel;
    private javax.swing.JLabel accionsLabel1;
    private javax.swing.JLabel accionsPolissaLabel;
    private javax.swing.JTextField anyFabricacioTextField;
    private javax.swing.JLabel anyLabel;
    private javax.swing.JPanel asseguradoraPanel;
    private javax.swing.JLabel asseguradoraPolisaLabel;
    private javax.swing.JTable asseguradoraTable;
    private javax.swing.JButton buscarAsseguradoraButton;
    private javax.swing.JButton buscarClientButton;
    private javax.swing.JLabel buscarClientLabel;
    private javax.swing.JButton buscarVehicleButton;
    private javax.swing.ButtonGroup buttonGroupCercaPolisses;
    private javax.swing.ButtonGroup buttonGroupTipus;
    private javax.swing.JLabel campCercaLabel;
    private javax.swing.JLabel carrerLabel;
    private javax.swing.JTextField carrerTextField;
    private javax.swing.JButton cercaPerTipusPolissaButton;
    private javax.swing.JTextField cercarPolissaTextField;
    private javax.swing.JLabel cifAsseguradoraLabel;
    private javax.swing.JTextField cifAsseguradoraTextField;
    private javax.swing.JLabel clientPolissaLabel;
    private javax.swing.JPanel clientsPanel;
    private javax.swing.JTable clientsTable;
    private javax.swing.JComboBox<String> comboBoxAsseguradoresPolissa;
    private javax.swing.JComboBox<String> comboBoxClients;
    private javax.swing.JComboBox<String> comboBoxClientsPolissa;
    private javax.swing.JComboBox<String> comboBoxVehiclePolissa;
    private javax.swing.JTextField consultaAsseguradoraPerNom;
    private javax.swing.JTextField consultaClientTextField;
    private javax.swing.JButton consultaClientsButton;
    private javax.swing.JTextField consultaVehicleTextField;
    private javax.swing.JButton consultaVehiclesButton;
    private javax.swing.JButton consultatAsseguradoresTotesButton;
    private javax.swing.JLabel dataFiLabelPolissa;
    private javax.swing.JTextField dataFiPolissaTextField;
    private javax.swing.JLabel dataIniciPolissaLabel;
    private javax.swing.JTextField dataIniciPolissaTextField;
    private javax.swing.JLabel direccioLabel;
    private javax.swing.JLabel importPolissaLabel;
    private javax.swing.JTextField importPolissaTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelInfoTable;
    private javax.swing.JLabel labelPoblacio;
    private javax.swing.JLabel marcaModelLabel;
    private javax.swing.JTextField marcaModelTextField;
    private javax.swing.JLabel matriculaLabel;
    private javax.swing.JTextField matriculaVehicleTextField;
    private javax.swing.JButton netejarCampsAsseguradoraButton;
    private javax.swing.JButton netejarCampsClientButton;
    private javax.swing.JButton netejarCampsPolissaButton;
    private javax.swing.JButton netejarCampsVehicle;
    private javax.swing.JLabel nifLabel;
    private javax.swing.JTextField nifTextField;
    private javax.swing.JLabel nomAsseguradoraLabel;
    private javax.swing.JTextField nomAsseguradoraTextField;
    private javax.swing.JLabel nomLabel;
    private javax.swing.JTextField nomTextField;
    private javax.swing.JLabel numeroLabel;
    private javax.swing.JLabel numeroPolissaLabel;
    private javax.swing.JTextField numeroPolissaTextField;
    private javax.swing.JTextField numeroTextField;
    private javax.swing.JTabbedPane panelPestanas;
    private javax.swing.JTextField poblacioTextField;
    private javax.swing.JTable polissaTable;
    private javax.swing.JPanel polissesPanel;
    private javax.swing.JLabel propietariLabel;
    private javax.swing.JRadioButton radioATercers;
    private javax.swing.JRadioButton rbIDClientPolissa;
    private javax.swing.JRadioButton rbIDVehiclePolissa;
    private javax.swing.JRadioButton rbTotesPolissa;
    private javax.swing.JButton registrarAsseguradoraButton;
    private javax.swing.JButton registrarClientButton;
    private javax.swing.JButton registrarPolissaButton;
    private javax.swing.JButton registrarVehicleButton;
    private javax.swing.JLabel tipusCercaPolissaLabel;
    private javax.swing.JLabel tipusPolissaLabel;
    private javax.swing.JLabel totsClientsLabel;
    private javax.swing.JLabel vehiclePolissaLabel;
    private javax.swing.JPanel vehiclesPanel;
    private javax.swing.JTable vehiclesTable;
    private javax.swing.JLabel vehiclesTodosLabel;
    // End of variables declaration//GEN-END:variables

}
