package vista;

import controlador.UsuariControlador;
import javax.swing.JOptionPane;
import model.Usuari;
import org.hibernate.service.spi.ServiceException;

public class IniciSessioGUI extends javax.swing.JFrame {

    private final UsuariControlador usuariControlador;

    public IniciSessioGUI() {
        initComponents();
        setLocationRelativeTo(null);
        usuariControlador = new UsuariControlador();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioGroupMenu = new javax.swing.ButtonGroup();
        usuariLabel = new javax.swing.JLabel();
        usuariTextField = new javax.swing.JTextField();
        contrasenaLabel = new javax.swing.JLabel();
        contrasenaPasswordField = new javax.swing.JPasswordField();
        iniciarSessioButton = new javax.swing.JButton();
        netejaCampsButton = new javax.swing.JButton();
        registrarUsuariButton = new javax.swing.JButton();
        configuracioMenuBar = new javax.swing.JMenuBar();
        menuConfguracio = new javax.swing.JMenu();
        externaMenuItem = new javax.swing.JRadioButtonMenuItem();
        internaMenuItem = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inici de sessió");
        setResizable(false);

        usuariLabel.setText("Nom usuari");

        contrasenaLabel.setText("Contrasenya");

        iniciarSessioButton.setText("Iniciar sessió");
        iniciarSessioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarSessio(evt);
            }
        });

        netejaCampsButton.setText("Netejar camps");
        netejaCampsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netejaCamps(evt);
            }
        });

        registrarUsuariButton.setText("Registrar usuari");
        registrarUsuariButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarUsuari(evt);
            }
        });

        menuConfguracio.setText("Configuració connexió");

        radioGroupMenu.add(externaMenuItem);
        externaMenuItem.setSelected(true);
        externaMenuItem.setText("Externa (Per defecte)");
        menuConfguracio.add(externaMenuItem);

        radioGroupMenu.add(internaMenuItem);
        internaMenuItem.setText("Interna");
        menuConfguracio.add(internaMenuItem);

        configuracioMenuBar.add(menuConfguracio);

        setJMenuBar(configuracioMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usuariTextField)
                    .addComponent(contrasenaPasswordField)
                    .addComponent(usuariLabel)
                    .addComponent(contrasenaLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(netejaCampsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(registrarUsuariButton, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                    .addComponent(iniciarSessioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usuariLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usuariTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(contrasenaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contrasenaPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(netejaCampsButton)
                    .addComponent(registrarUsuariButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iniciarSessioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarSessio(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarSessio
        lanzarAccion(true);
    }//GEN-LAST:event_iniciarSessio

    private void netejaCamps(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netejaCamps
        usuariTextField.setText("");
        contrasenaPasswordField.setText("");
        ponerFocoLogin();
    }//GEN-LAST:event_netejaCamps

    private void registrarUsuari(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarUsuari
        lanzarAccion(false);
    }//GEN-LAST:event_registrarUsuari

    private void lanzarAccion(boolean iniciarSesion) {
        if (comprobarCampos()) {
            if (cambiarEntity()) {
                if (iniciarSesion) {
                    lanzarInicioSesion();
                } else {
                    lanzarRegistroUsuario();
                }
            } else {
                lanzarMensajeEmergente(true, "Error amb la connexió, assegurat que tot està correcte.");
            }
        } else {
            lanzarMensajeEmergente(true, "Comprova que cap dels camps està buit o la mida de la contrasenya és més gran que 6 caràcters.");
        }
    }

    private void lanzarInicioSesion() {
        int validacion = usuariControlador.validarSesio(obtenerUsuariDeLaVista());
        if (validacion == 1) {
            new AplicacionGeneralGUI(obtenerTipoConexion()).setVisible(true);
            this.dispose();
        } else {
            lanzarMensajeEmergente(true, validacion == 0
                    ? "L'usuari existeix però la contrasenya és incorrecte."
                    : "No existeix l'usuari.");
        }
    }

    private void lanzarRegistroUsuario() {
        boolean insertadoCorrectamente = usuariControlador.insertarUsuari(obtenerUsuariDeLaVista());
        lanzarMensajeEmergente(!insertadoCorrectamente, insertadoCorrectamente
                ? "Usuari inserit correctament."
                : "No s'ha pogut inserir l'usuari, ja existeix un usuari amb aquest nom.");
    }

    private boolean cambiarEntity() {
        boolean correcto = true;
        try {
            usuariControlador.cambiarEntityManager(obtenerTipoConexion());
        } catch (ServiceException se) {
            correcto = false;
        }
        return correcto;
    }

    private void ponerFocoLogin() {
        usuariTextField.requestFocus();
    }

    private boolean obtenerTipoConexion() {
        return externaMenuItem.isSelected();
    }

    private Usuari obtenerUsuariDeLaVista() {
        return new Usuari(usuariTextField.getText(), new String(contrasenaPasswordField.getPassword()));
    }

    private boolean comprobarCampos() {
        return usuariTextField.getText() != null && !usuariTextField.getText().isEmpty()
                && contrasenaPasswordField.getPassword() != null
                && contrasenaPasswordField.getPassword().length >= 6;
    }

    private void lanzarMensajeEmergente(boolean error, String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje,
                error ? "Error" : "Informació",
                error ? JOptionPane.ERROR_MESSAGE : JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar configuracioMenuBar;
    private javax.swing.JLabel contrasenaLabel;
    private javax.swing.JPasswordField contrasenaPasswordField;
    private javax.swing.JRadioButtonMenuItem externaMenuItem;
    private javax.swing.JButton iniciarSessioButton;
    private javax.swing.JRadioButtonMenuItem internaMenuItem;
    private javax.swing.JMenu menuConfguracio;
    private javax.swing.JButton netejaCampsButton;
    private javax.swing.ButtonGroup radioGroupMenu;
    private javax.swing.JButton registrarUsuariButton;
    private javax.swing.JLabel usuariLabel;
    private javax.swing.JTextField usuariTextField;
    // End of variables declaration//GEN-END:variables
}
